---
- name: Setup docker registry
  hosts: localhost
  environment:
    HELM_PLUGINS: "{{playbook_dir}}/helm/plugins"
    HELM_BIN: "{{playbook_dir}}/helm/bin/helm"
    KUBECONFIG: "{{playbook_dir}}/../../rke/kube_config_cluster.yml"
    HELM_REPOSITORY_CONFIG: "{{playbook_dir}}/helm/repositories.yaml"
    HELM_REPOSITORY_CACHE: "{{playbook_dir}}/helm/repository"
    HELM_CACHE_HOME: "{{playbook_dir}}/helm/cache"
    HELM_CONFIG_HOME: "{{playbook_dir}}/helm/config"
    HELM_DATA_HOME: "{{playbook_dir}}/helm/data"
  tasks:
    - name: download helm
      command: 
        cmd: /bin/bash -c "mkdir -p ./helm/bin && wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz && tar -zxvf helm-v3.10.3-linux-amd64.tar.gz && rm -r helm-v3.10.3-linux-amd64.tar.gz && mv linux-amd64/helm $HELM_BIN && chmod +x $HELM_BIN && rm -r linux-amd64"
        creates: $HELM_BIN
    - name: Add twun helm repo
      command:
        cmd: $HELM_BIN repo add twuni https://helm.twun.io
    - name: Install docker-registry
      command:
        cmd: $HELM_BIN upgrade --install --wait --wait-for-jobs docker-registry twuni/docker-registry --set "service.type=NodePort" --set-string "tolerations[0].key=node.cloudprovider.kubernetes.io/uninitialized" --set-string "tolerations[0].value=true" --set-string "tolerations[0].effect=NoSchedule" --set-string "tolerations[0].operator=Equal"
- name: Retrieve nodeport information
  hosts: localhost
  environment:
    KUBECONFIG: "{{playbook_dir}}/../../rke/kube_config_cluster.yml"
  tasks:
    - name: Add insecure registry
      command:
        cmd: kubectl get --namespace default -o jsonpath="{.spec.ports[0].nodePort}" services docker-registry
      register: nodeport_port
    - name: Add insecure registry
      command:
        cmd: kubectl get nodes --namespace default -o jsonpath="{.items[0].status.addresses[0].address}"
      register: nodeport_ip
- name: Setup Docker
  hosts: bastion, control_planes, workers
  tasks:
    - name: Add registry to insecure registry
      become: yes
      copy:  
        content:  '{ "insecure-registries":["{{ hostvars["localhost"]["nodeport_ip"].stdout }}:{{ hostvars["localhost"]["nodeport_port"].stdout }}"] }'
        dest: "/etc/docker/daemon.json"
    - name: restart docker
      become: yes
      systemd:
        name: docker
        state: restarted
- name: Create tunnel forwarding
  hosts: localhost
  tasks:
    - name: Start 
      copy:  
        content: |
          #!/bin/bash
          set -e
          project_root=$(cd "$(dirname $0)/../.." && pwd)
          cd "$project_root"
          echo "You can access the Docker registry by using \"localhost:4242\" from your computer or \"{{hostvars["localhost"]["nodeport_ip"].stdout }}:{{ hostvars["localhost"]["nodeport_port"].stdout }}\" from the cluster."
          echo "Press Ctrl-C to stop port-forwarding."
          ssh -F ssh_config -L 4242:{{hostvars["localhost"]["nodeport_ip"].stdout }}:{{ hostvars["localhost"]["nodeport_port"].stdout }} -N bastion
        dest: "./start_port_forwarding.sh"
        mode: 0755
